[{"title":"支付宝登录开发指引","path":"//alipay_login_develop/","content":"网站登录 网站如何实现第三方支付宝登录 1 2 PC 拼接授权页面URL，访问的时候带有redirect_uri等参数 在授权页面扫码授权后支付宝会重定向到redirect_uri，并且携带auth_code和user_id等参数 在自己应用中，即redirect_uri中根据auth_code和user_id匹配数据库中的用户或创建新用户 可以使用 alipay.user.info.share接口来获取用户的昵称和头像等信息 第一步： 拼接授权页面 URL 第二步： alipay.system.oauth.token(换取授权访问令牌) 可选： alipay.user.info.share(调用接口获取用户信息) H5H5支付分支付宝端内和端外两种。 1、支付宝钱包端外进行H5支付宝登录外部H5不支持直接在页面进行身份验证，需要跳转到支付宝端内进行。可以通过添加支付宝短连接形式唤起支付宝，再进行授权。 参考示例： 12345//url是授权链接(如PC端的授权链接)alipays://platformapi/startapp?appId=20000067&amp;url=encodeURIComponent(url)//完整的示例代码alipays://platformapi/startapp?appId=20000067&amp;url=https%3A%2F%2Fopenauth.alipay.com%2Foauth2%2FpublicAppAuthorize.htm%3Fapp_id%3DAPPID%26scope%3Dauth_user%26redirect_uri%3DENCODED_URL%26state%3Dinit 附网站如何实现第三方支付宝登录","tags":["支付宝","支付宝登录"],"categories":["开发经验"]},{"title":"微信登录开发指引","path":"//wechat_login_develop/","content":"网站流程 第三方发起微信授权登录请求，微信用户允许授权第三方应用后，微信会拉起应用或重定向到第三方网站，并且带上授权临时票据code参数； 通过code参数加上AppID和AppSecret等，通过API换取access_token； 通过access_token进行接口调用，获取用户基本数据资源或帮助用户实现基本操作。 PC第一步：请求CODE 第三方使用网站应用授权登录前请注意已获取相应网页授权作用域（scope&#x3D;snsapi_login），则可以通过在PC端打开以下链接： https://open.weixin.qq.com/connect/qrconnect?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect 若提示“该链接无法访问”，请检查参数是否填写错误，如redirect_uri的域名与审核时填写的授权域名不一致或scope不为snsapi_login。 第二步：通过code获取access_token 第二步会返回openid等信息，可以使用openid或unionid匹配数据库中的数据进行登录验证 12345678&#123; &quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;, &quot;expires_in&quot;:7200, &quot;refresh_token&quot;:&quot;REFRESH_TOKEN&quot;,&quot;openid&quot;:&quot;OPENID&quot;, &quot;scope&quot;:&quot;SCOPE&quot;,&quot;unionid&quot;: &quot;o6_bmasdasdsad6_2sgVt7hMZOPfL&quot;&#125; 如果说没数据库中没有匹配到用户，那么可以通过获取用户信息的接口获取到微信的用户信息然后自动创建一个用户 接口描述 接口会返回如下信息： 1234567891011121314&#123; &quot;openid&quot;:&quot;OPENID&quot;, &quot;nickname&quot;:&quot;NICKNAME&quot;, &quot;sex&quot;:1, &quot;province&quot;:&quot;PROVINCE&quot;, &quot;city&quot;:&quot;CITY&quot;, &quot;country&quot;:&quot;COUNTRY&quot;, &quot;headimgurl&quot;: &quot;https://thirdwx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ4eMsv84eavHiaiceqxibJxCfHe/0&quot;, &quot;privilege&quot;:[ &quot;PRIVILEGE1&quot;, &quot;PRIVILEGE2&quot; ], &quot;unionid&quot;: &quot; o6_bmasdasdsad6_2sgVt7hMZOPfL&quot;&#125; 刷新或续期access_token使用 | 微信开放文档 (qq.com) H5微信内浏览器可以直接呼出按钮登录，微信外浏览器只能同pc端一样扫码登录 官方文档：准备工作 | 微信开放文档 (qq.com) 附下面是引用自其他作者对微信登录终端的说明 微信登录的几种情况 PC端： PC端微信浏览器 -&gt; 直接调用微信授权（不扫码，使用微信服务号的appid和appsecret） PC端其他浏览器 -&gt; 跳转微信的扫码登录页面（需要扫码，使用微信开放平台注册的PC应用appid和appsecret） 移动端 微信客户端打开 -&gt; 直接调用微信授权（不扫码，使用微信服务号的appid和appsecret） 其他手机浏览器打开 -&gt; 跳转微信的扫码登录页面（需要扫码，使用微信开放平台注册的PC应用appid和appsecret）","tags":["微信","微信登录"],"categories":["开发经验"]},{"title":"Docker搭建开发环境","path":"//docker_develop_env/","content":"下载基础环境1234567docker pull nginxdocker pull php:7.4-fpmdocker pull php:8.2-fpmdocker pull mysqldocker pull mysql:5.6docker pull redisdocker pull postgres 运行准备为了保证容器之间可以相互连通，有两种方法： 运行容器时使用–link绑定其他容器，但是这种方法是一次性的，只能运行容器的时候指定，不利于后期扩展其他容器 写法 1234--link php74# 示例docker run --name nginx --link php74 -d nginx 固定容器的IP，每个容器都会分配一个专属的IP，容器之间可以通过对方IP访问服务，但是默认IP是动态分配的，即每次重启都会分配新的IP；因此可以固定IP（推荐这种方法） 创建自定义网络 1docker network create --driver bridge --subnet=172.16.0.0/16 dockernetwork 之后在运行容器的时候加上下方参数分配IP既可 1234--network dockernetwork --ip=172.16.1.100# 示例docker run --name nginx --network dockernetwork --ip=172.16.1.10 -d nginx 1.mysql8123456789101112131415# 1.先初始化创建一份docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql# 2.复制配置文件到宿主机（确保宿主机上目录存在）docker cp mysql:/etc/mysql &quot;D:\\Docker\\Mysql\\mysql8\\conf&quot;# 3.删除掉容器docker stop mysqldocker rm mysql# 4-1.再重新创建容器docker run --name mysql -p 3306:3306 -v D:\\Docker\\Mysql\\mysql8\\conf:/etc/mysql -v D:\\Docker\\Mysql\\mysql8\\data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql# 4-2.分配IP的写法docker run --name mysql -p 3306:3306 -v D:\\Docker\\Mysql\\mysql8\\conf:/etc/mysql -v D:\\Docker\\Mysql\\mysql8\\data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --network dockernetwork --ip=172.16.1.10 -d mysql 2.mysql5.6123456789101112131415# 1.先初始化创建一份docker run --name mysql56 -p 3305:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:5.6# 2.复制配置文件到宿主机（确保宿主机上目录存在）docker cp mysql56:/etc/mysql &quot;D:\\Docker\\Mysql\\mysql56\\conf&quot;# 3.删除掉容器docker stop mysql56docker rm mysql56# 4-1.再重新创建容器docker run --name mysql56 -p 3305:3306 -v D:\\Docker\\Mysql\\mysql56\\conf:/etc/mysql -v D:\\Docker\\Mysql\\mysql56\\data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.6# 4-2.分配IP的写法docker run --name mysql56 -p 3305:3306 -v D:\\Docker\\Mysql\\mysql56\\conf:/etc/mysql -v D:\\Docker\\Mysql\\mysql56\\data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --network dockernetwork --ip=172.16.1.11 -d mysql:5.6 3.redis1234docker run --name redis -p 6379:6379 -v D:\\Docker\\Redis\\redis.conf:/etc/redis/redis.conf -v D:\\Docker\\Redis\\data:/data redis:latest redis-server --appendonly yes#分配IP的写法docker run --name redis -p 6379:6379 -v D:\\Docker\\Redis\\redis.conf:/etc/redis/redis.conf -v D:\\Docker\\Redis\\data:/data --network dockernetwork --ip=172.16.1.12 redis:latest redis-server --appendonly yes 4.postgres1234docker run --name postgres -e POSTGRES_PASSWORD=root% -p 5432:5432 -v D:\\Docker\\Postgres\\data:/var/lib/postgresql/data -d postgres#分配IP的写法docker run --name postgres -e POSTGRES_PASSWORD=root% -p 5432:5432 -v D:\\Docker\\Postgres\\data:/var/lib/postgresql/data --network dockernetwork --ip=172.16.1.13 -d postgres 5.php8.2步骤：先运行一个容器，然后复制配置文件到宿主机，删除容器后再运行容器 123456789101112131415# 1.先初始化创建一份docker run --name php82 -p 9001:9000 -d php:8.2-fpm# 2.复制配置文件到宿主机docker cp php82:/usr/local/etc/php &quot;D:\\Docker\\PHP\\php82&quot;# 3.删除掉容器docker stop php82docker rm php82# 4-1.再重新创建容器docker run --name php82 -p 9001:9000 -v D:\\wwwroot:/www -v D:\\Docker\\PHP\\php82:/usr/local/etc/php -d php:8.2-fpm# 4-2.分配IP的写法docker run --name php82 -p 9001:9000 -v D:\\wwwroot:/www -v D:\\Docker\\PHP\\php82:/usr/local/etc/php --network dockernetwork --ip=172.16.1.14 -d php:8.2-fpm 6.php7.4步骤：先运行一个容器，然后复制配置文件到宿主机，删除容器后再运行容器 123456789101112131415# 1.先初始化创建一份docker run --name php74 -p 9000:9000 -d php:7.4-fpm# 2.复制配置文件到宿主机docker cp php74:/usr/local/etc/php &quot;D:\\Docker\\PHP\\php74&quot;# 3.删除掉容器docker stop php74docker rm php74# 4-1.再重新创建容器docker run --name php74 -p 9000:9000 -v D:\\wwwroot:/www -v D:\\Docker\\PHP\\php74:/usr/local/etc/php -d php:7.4-fpm# 4-2.分配IP的写法docker run --name php74 -p 9000:9000 -v D:\\wwwroot:/www -v D:\\Docker\\PHP\\php74:/usr/local/etc/php --network dockernetwork --ip=172.16.1.15 -d php:7.4-fpm 7.nginx1234567891011121314# 先初始化创建一份 nginxdocker run --name nginx -p 80:80 -d nginx:latest# 复制配置文件到宿主机docker cp nginx:/etc/nginx &quot;D:\\Docker\\Nginx&quot;# 删除掉容器docker stop nginxdocker rm nginx# 再重新创建容器docker run --name nginx -p 80:80 -v D:\\wwwroot:/usr/share/nginx/html -v D:\\Docker\\Nginx:/etc/nginx -d nginx:latest#分配IP的写法docker run --name nginx -p 80:80 -v D:\\wwwroot:/usr/share/nginx/html -v D:\\Docker\\Nginx:/etc/nginx --network dockernetwork --ip=172.16.1.16 -d nginx:latest 额外配置MySql81、启动容器的时候已经制定了root密码，但是连接的时候还是没有密码 image-20230716235841600 进入宿主机终端 12mysql -uroot -p# 初始化没密码，直接敲回车进入mysql指令界面 允许远程连接 12345use mysql;UPDATE USER SET host = &#x27;%&#x27; WHERE USER =&#x27;root&#x27;;FLUSH PRIVILEGES; 设置密码 123ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;新密码&#x27;;FLUSH PRIVILEGES; Postgres1、修改密码 进入宿主机终端 进入指令界面 1psql 修改密码 1ALTER ROLE postgres WITH PASSWORD &#x27;your_password&#x27;; 扩展composer1https://getcomposer.org/Composer-Setup.exe composer 腾讯云镜像 1composer config -g repos.packagist composer https://mirrors.tencent.com/composer/ PHP扩展安装…","tags":["开发经验","Docker","PHP","MySql","Nginx","Redis","Postgres"],"categories":["开发经验"]},{"title":"Laravel开发流","path":"//laravel_develop_note/","content":"扩展包 阿里云oss aliyun-oss-laravel Aliyun OSS Laravel 阿里云OSS前端STS直传 AliYun OSS AppServer 查询过滤器-快速做条件查询&#x2F;搜索 Tucker-Eric&#x2F;EloquentFilter: An Eloquent Way To Filter Laravel Models And Their Relationships laravel8 中文文档 https://learnku.com/docs/laravel/8.5 权限 https://github.com/spatie/laravel-permission spatie&#x2F;Laravel-permission Laravel 应用中的角色和权限控制 常见问题 Passport token 获取 用户id Get user ID By Access Token ? (laracasts.com) image-20230402224237488 12345678910 $access_token = $request-&gt;header(&#x27;Authorization&#x27;); $auth_header = explode(&#x27; &#x27;, $access_token); $token = $auth_header[1]; $token_parts = explode(&#x27;.&#x27;, $token); $token_header = $token_parts[1]; $token_header_json = base64_decode($token_header); $token_header_array = json_decode($token_header_json, true); $token_id = $token_header_array[&#x27;jti&#x27;];$user = Token::find($token_id)-&gt;user","tags":["Laravel"],"categories":["开发经验"]},{"title":"开源项目收录","path":"//opensource_project/","content":"前端UIhttps://github.com/d2-projects/d2-adminhttps://github.com/d2-projects/d2-admin https://github.com/vbenjs/vue-vben-adminhttps://github.com/vbenjs/vue-vben-admin https://gitee.com/lolicode/scuihttps://gitee.com/lolicode/scui https://github.com/lyt-Top/vue-next-adminhttps://github.com/lyt-Top/vue-next-admin https://tdesign.tencent.com/https://tdesign.tencent.com/ http://www.pearadmin.comhttp://www.pearadmin.com https://github.com/pure-admin/vue-pure-adminhttps://github.com/pure-admin/vue-pure-admin https://github.com/honghuangdc/soybean-adminhttps://github.com/honghuangdc/soybean-admin https://github.com/vbenjs/vue-vben-adminhttps://github.com/vbenjs/vue-vben-admin https://github.com/honghuangdc/soybean-adminhttps://github.com/honghuangdc/soybean-admin https://github.com/jekip/naive-ui-adminhttps://github.com/jekip/naive-ui-admin 系统https://gitee.com/ZhongBangKeJi/CRMChathttps://gitee.com/ZhongBangKeJi/CRMChat https://github.com/lybenson/bilibili-vuehttps://github.com/lybenson/bilibili-vue https://github.com/geekskai/vue3-jd-h5https://github.com/geekskai/vue3-jd-h5 https://github.com/newbee-ltd/newbee-mall-vue3-apphttps://github.com/newbee-ltd/newbee-mall-vue3-app 图标https://chuangzaoshi.com/iconhttps://chuangzaoshi.com/icon 软件音乐可视化软件 https://github.com/astrofox-io/astrofoxhttps://github.com/astrofox-io/astrofox","tags":["开源项目"],"categories":["开源项目"]},{"title":"关于我","path":"/about/index.html","content":"就是一个普普通通的年轻程序员，入行5年有余。"},{"title":"开发服务","path":"/develop/index.html","content":"鄙人从事软件开发五年有余了，目前创业中，创业艰辛。所以也承包软件开发服务。 可全栈开发开发类型： 微信小程序 网站（PC、H5） Android IOS 爬虫 如果您有开发需求的话可以给我发邮件或直接在下方留言，我们可以来聊聊哈！ 我的邮箱：alan1024m@gmail.com"}]